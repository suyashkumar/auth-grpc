// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	User
	RegisterRequest
	RegisterResponse
	GetTokenRequest
	GetTokenResponse
	ValidateRequest
	ValidateResponse
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Permissions int32

const (
	Permissions_USER  Permissions = 0
	Permissions_ADMIN Permissions = 1
)

var Permissions_name = map[int32]string{
	0: "USER",
	1: "ADMIN",
}
var Permissions_value = map[string]int32{
	"USER":  0,
	"ADMIN": 1,
}

func (x Permissions) String() string {
	return proto.EnumName(Permissions_name, int32(x))
}
func (Permissions) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type User struct {
	Uuid        string      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Email       string      `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	FirstName   string      `protobuf:"bytes,3,opt,name=firstName" json:"firstName,omitempty"`
	LastName    string      `protobuf:"bytes,4,opt,name=lastName" json:"lastName,omitempty"`
	Permissions Permissions `protobuf:"varint,5,opt,name=permissions,enum=Permissions" json:"permissions,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetPermissions() Permissions {
	if m != nil {
		return m.Permissions
	}
	return Permissions_USER
}

type RegisterRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	FirstName string `protobuf:"bytes,2,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=lastName" json:"lastName,omitempty"`
	Password  string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *RegisterRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetTokenRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *GetTokenRequest) Reset()                    { *m = GetTokenRequest{} }
func (m *GetTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTokenRequest) ProtoMessage()               {}
func (*GetTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetTokenRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetTokenRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type GetTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetTokenResponse) Reset()                    { *m = GetTokenResponse{} }
func (m *GetTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTokenResponse) ProtoMessage()               {}
func (*GetTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ValidateRequest) Reset()                    { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()               {}
func (*ValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ValidateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidateResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ValidateResponse) Reset()                    { *m = ValidateResponse{} }
func (m *ValidateResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidateResponse) ProtoMessage()               {}
func (*ValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ValidateResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*RegisterRequest)(nil), "RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "RegisterResponse")
	proto.RegisterType((*GetTokenRequest)(nil), "GetTokenRequest")
	proto.RegisterType((*GetTokenResponse)(nil), "GetTokenResponse")
	proto.RegisterType((*ValidateRequest)(nil), "ValidateRequest")
	proto.RegisterType((*ValidateResponse)(nil), "ValidateResponse")
	proto.RegisterEnum("Permissions", Permissions_name, Permissions_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Auth service

type AuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/Auth/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := grpc.Invoke(ctx, "/Auth/GetToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := grpc.Invoke(ctx, "/Auth/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Auth_GetToken_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Auth_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4e, 0xeb, 0x30,
	0x10, 0xac, 0xdb, 0xe4, 0x29, 0xdd, 0x3e, 0x51, 0xd7, 0xe2, 0x10, 0x22, 0x0e, 0x95, 0x2f, 0x54,
	0x48, 0x58, 0xa2, 0x7c, 0x41, 0x05, 0x08, 0x71, 0xa0, 0x42, 0x81, 0x72, 0x37, 0xea, 0x42, 0x2d,
	0xda, 0x26, 0xd8, 0x8e, 0x38, 0xf1, 0x23, 0x5c, 0xf8, 0x55, 0x14, 0xb7, 0x21, 0x91, 0x81, 0xde,
	0xb2, 0xb3, 0xe3, 0xf1, 0xcc, 0x38, 0x00, 0xb2, 0xb0, 0x0b, 0x91, 0xeb, 0xcc, 0x66, 0xfc, 0x83,
	0x40, 0x30, 0x33, 0xa8, 0x19, 0x83, 0xa0, 0x28, 0xd4, 0x3c, 0x26, 0x43, 0x32, 0xea, 0xa6, 0xee,
	0x9b, 0xed, 0x43, 0x88, 0x2b, 0xa9, 0x96, 0x71, 0xdb, 0x81, 0x9b, 0x81, 0x1d, 0x42, 0xf7, 0x49,
	0x69, 0x63, 0xa7, 0x72, 0x85, 0x71, 0xc7, 0x6d, 0x6a, 0x80, 0x25, 0x10, 0x2d, 0xe5, 0x76, 0x19,
	0xb8, 0xe5, 0xf7, 0xcc, 0x04, 0xf4, 0x72, 0xd4, 0x2b, 0x65, 0x8c, 0xca, 0xd6, 0x26, 0x0e, 0x87,
	0x64, 0xb4, 0x37, 0xfe, 0x2f, 0x6e, 0x6b, 0x2c, 0x6d, 0x12, 0xf8, 0x3b, 0xf4, 0x53, 0x7c, 0x56,
	0xc6, 0xa2, 0x4e, 0xf1, 0xb5, 0x40, 0x63, 0x6b, 0x4b, 0xe4, 0x4f, 0x4b, 0xed, 0x5d, 0x96, 0x3a,
	0x9e, 0xa5, 0x04, 0xa2, 0x5c, 0x1a, 0xf3, 0x96, 0xe9, 0x79, 0x65, 0xb7, 0x9a, 0x39, 0x03, 0x5a,
	0x5f, 0x6f, 0xf2, 0x6c, 0x6d, 0x90, 0x9f, 0x43, 0xff, 0x0a, 0xed, 0x7d, 0xf6, 0x82, 0xeb, 0xdd,
	0x96, 0x9a, 0xc2, 0x6d, 0x4f, 0x78, 0x04, 0xb4, 0x16, 0xd9, 0x08, 0x97, 0x2a, 0xb6, 0x04, 0x2a,
	0x15, 0x37, 0xf0, 0x23, 0xe8, 0x3f, 0xc8, 0xa5, 0x9a, 0x4b, 0x8b, 0x8d, 0xeb, 0x7e, 0x21, 0x9e,
	0x00, 0xad, 0x89, 0x5b, 0xc9, 0x03, 0x08, 0x0a, 0x83, 0xda, 0x11, 0x7b, 0xe3, 0x50, 0x94, 0xef,
	0x9c, 0x3a, 0xe8, 0x98, 0x43, 0xaf, 0xd1, 0x3a, 0x8b, 0x20, 0x98, 0xdd, 0x5d, 0xa6, 0xb4, 0xc5,
	0xba, 0x10, 0x4e, 0x2e, 0x6e, 0xae, 0xa7, 0x94, 0x8c, 0x3f, 0x09, 0x04, 0x93, 0xc2, 0x2e, 0xd8,
	0x29, 0x44, 0x55, 0x0f, 0x8c, 0x0a, 0xef, 0x45, 0x92, 0x81, 0xf8, 0x51, 0x52, 0xab, 0x3c, 0x52,
	0x25, 0x64, 0x54, 0x78, 0x8d, 0x25, 0x03, 0xe1, 0xc7, 0xdf, 0x1c, 0xa9, 0x12, 0x30, 0x2a, 0xbc,
	0xd4, 0xc9, 0x40, 0xf8, 0xf1, 0x78, 0xeb, 0xf1, 0x9f, 0xfb, 0x87, 0xcf, 0xbe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xae, 0x29, 0x65, 0xe7, 0xd1, 0x02, 0x00, 0x00,
}
